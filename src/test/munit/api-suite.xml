<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="api-suite.xml" />
	<munit:test name="apix-mongodb-sapi-main-test" doc:id="6d4e532d-b1b4-4eec-ae39-5255774c8a8c" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock APIkit Router" doc:id="29c26d53-8994-4a29-9668-61091f5a17e6" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="apixMongodbSapiConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://apixmongodbsapimaintest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://apixmongodbsapimaintest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://apixmongodbsapimaintest\mock_variable_.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[readUrl('classpath://apixmongodbsapimaintest\mock_variable_1.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="f5cdd894-c169-45c0-850d-c1b48960502c" >
				<munit:payload value="#[output application/json --- readUrl('classpath://apixmongodbsapimaintest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://apixmongodbsapimaintest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="apix-mongodb-sapi-main" doc:id="5abeb641-c73e-4969-b4c6-d8383ebfa9e2" name="apix-mongodb-sapi-main"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="23a36001-e565-41af-992e-9eba94320fa5" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import apixmongodbsapimaintest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="post:\collection:application\json:apixMongodbSapiConfig-test" doc:id="b0544e22-9467-4f54-81c3-0f16ce7563e2" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="ef51f31d-4900-4d11-855b-6ea63d632b85" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="create-collection" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="e859baa1-95af-43aa-a738-a09661af86f9" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="create-collection" attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://postcreateCollectionapplicationjsonapixMongodbSapiConfigtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://postcreateCollectionapplicationjsonapixMongodbSapiConfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postcreateCollectionapplicationjsonapixMongodbSapiConfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="83adf1d2-ad19-4b64-9cf2-f8009e5f2b1c" >
				<munit:payload value="#[output application/json --- readUrl('classpath://postcreateCollectionapplicationjsonapixMongodbSapiConfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://postcreateCollectionapplicationjsonapixMongodbSapiConfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postcreateCollectionapplicationjsonapixMongodbSapiConfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="post:\collection:application\json:apixMongodbSapiConfig" doc:id="0709ce03-a86e-4cc8-ba5f-f1a53babcc80" name="post:\collection:application\json:apixMongodbSapiConfig"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="edd5f1ca-05f7-44be-9109-fae1c5969ee3" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postcreateCollectionapplicationjsonapixMongodbSapiConfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="post:\documents:application\json:apixMongodbSapiConfig-test" doc:id="a092dfb4-ca4b-45f4-843f-fc199c69d1e4" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="d6175a51-47df-428a-ac4c-6254c11e6c52" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="insert-data" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="e23c84dc-8a94-42d1-be22-6b77f2d24511" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="insert-data" attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://postinsertDataapplicationjsonapixMongodbSapiConfigtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://postinsertDataapplicationjsonapixMongodbSapiConfigtest\mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postinsertDataapplicationjsonapixMongodbSapiConfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="4f8c9336-d5ac-404d-ad10-4a0e75b6795f" >
				<munit:payload value="#[output application/json --- readUrl('classpath://postinsertDataapplicationjsonapixMongodbSapiConfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://postinsertDataapplicationjsonapixMongodbSapiConfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postinsertDataapplicationjsonapixMongodbSapiConfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="post:\documents:application\json:apixMongodbSapiConfig" doc:id="c0747cd9-4c4f-4489-b781-3296d3ab150d" name="post:\documents:application\json:apixMongodbSapiConfig"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="e3334e26-b9de-4fe8-a0e4-3ce37029b901" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postinsertDataapplicationjsonapixMongodbSapiConfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\document\(id):apixMongodbSapiConfig-test" doc:id="ca3cc31f-1856-4b05-830b-f39642d74293" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="7d13a081-ea48-46d0-bbea-9aff0532d99c" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="get-document-by-id" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="edf74671-47b0-49db-bc8e-1349d4fd7f6c" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="get-document-by-id" attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://getgetDataidapixMongodbSapiConfigtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getgetDataidapixMongodbSapiConfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="d87d9c72-46a7-4467-a9a0-adabbf3d7fc3" >
				<munit:payload value="#[readUrl('classpath://getgetDataidapixMongodbSapiConfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getgetDataidapixMongodbSapiConfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getgetDataidapixMongodbSapiConfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="get:\document\(id):apixMongodbSapiConfig" doc:id="24b32c77-40bf-45a6-a6ac-23f71f91c1af" name="get:\document\(id):apixMongodbSapiConfig"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="863726c6-3031-47c0-b4d3-c98471efc085" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getgetDataidapixMongodbSapiConfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\documents:apixMongodbSapiConfig-test" doc:id="4e7520f8-b7e7-497f-b64f-f4624417f9dd" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="60856429-4dc1-4302-a1aa-9fca24b8aaa1" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="get-all-documents" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="2ec9d49d-fe55-482a-9567-3956e85427f2" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="get-all-documents" attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://getgetDataallapixMongodbSapiConfigtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getgetDataallapixMongodbSapiConfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="7b7fac73-2c7b-4b62-b6cc-06df2b01dd80" >
				<munit:payload value="#[readUrl('classpath://getgetDataallapixMongodbSapiConfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getgetDataallapixMongodbSapiConfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getgetDataallapixMongodbSapiConfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="get:\documents:apixMongodbSapiConfig" doc:id="7f94011d-ab62-4048-9628-eb5ccb9cef3a" name="get:\documents:apixMongodbSapiConfig"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="c7c649f6-67d5-4e61-8fb0-83e2f8db05a0" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getgetDataallapixMongodbSapiConfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="delete:\document\(id):apixMongodbSapiConfig-test" doc:id="86dcbf02-27d0-4aeb-b296-f84df4571d75" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="7ce8d186-bf18-4c7f-a8de-95f63384e371" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="remove-document-by-id" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="99e8b2ed-b9d6-4bef-a429-9efa59aae8a6" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="remove-document-by-id" attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://deletedeleteDataidapixMongodbSapiConfigtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://deletedeleteDataidapixMongodbSapiConfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="4574c401-7ce4-49c8-befa-3de994decffe" >
				<munit:payload value="#[readUrl('classpath://deletedeleteDataidapixMongodbSapiConfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://deletedeleteDataidapixMongodbSapiConfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://deletedeleteDataidapixMongodbSapiConfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="delete:\document\(id):apixMongodbSapiConfig" doc:id="f43842c8-ed27-427b-9461-69d89728355f" name="delete:\document\(id):apixMongodbSapiConfig"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="fda9c771-a59b-48b2-a977-c89a9818dfb3" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import deletedeleteDataidapixMongodbSapiConfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="put:\document\(id):application\json:apixMongodbSapiConfig-test" doc:id="967f6890-73b9-4f7e-bc4e-742b898b7860" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="0ae4dd11-5fef-4004-a1e7-fdf0c5964b0e" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="update-document-by-id" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="939620c5-8172-4887-a7b5-630bf4f18933" attributeName="doc:id" />
					<munit-tools:with-attribute whereValue="update-document-by-id" attributeName="name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://putupdateDataidapplicationjsonapixMongodbSapiConfigtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://putupdateDataidapplicationjsonapixMongodbSapiConfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="temp" value="#[output application/json --- readUrl('classpath://putupdateDataidapplicationjsonapixMongodbSapiConfigtest\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="d70a99e9-62a1-409d-a44b-49e5d3287363" >
				<munit:payload value="#[output application/json --- readUrl('classpath://putupdateDataidapplicationjsonapixMongodbSapiConfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://putupdateDataidapplicationjsonapixMongodbSapiConfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://putupdateDataidapplicationjsonapixMongodbSapiConfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="put:\document\(id):application\json:apixMongodbSapiConfig" doc:id="7f044536-42f9-4bbd-99f0-144c8c476f14" name="put:\document\(id):application\json:apixMongodbSapiConfig"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="096a589d-3666-4145-86cd-7348c09c7a1f" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import putupdateDataidapplicationjsonapixMongodbSapiConfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="api-test-suite-apix-mongodb-sapi-mainTest-api-kit-bad-request" doc:id="78e92588-d43a-4988-9947-d8ce1aa2f564" description="Test">
			<munit:behavior >
			<munit-tools:mock-when doc:name="Mock when" doc:id="4e29bf6f-a859-4339-9d80-b93a3f19ea9d" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="apixMongodbSapiConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:BAD_REQUEST" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="96877a15-e4a3-406b-a8f5-213d628fa3cc" >
				<flow-ref doc:name="apix-mongodb-sapi-main" doc:id="c5999dc3-72bb-4263-b6ab-c39d7af8cac0" name="apix-mongodb-sapi-main" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="4eb42e5d-43dd-41ad-a0de-4e124a015d80" >
						<logger level="INFO" doc:name="Logger" doc:id="9977dcf9-2530-46d8-95d2-0eb713d0e637" message='#[""]'/>
					</on-error-continue>
				</error-handler>
			</try>
			</munit:execution>
		<munit:validation >
			<munit-tools:assert-equals doc:name="Assert equals" doc:id="1f1f6b59-6415-4dbc-932a-029bc2100ae5" actual="#[payload.errorType.identifier]" expected="#['BAD_REQUEST']"/>
		</munit:validation>
		</munit:test>
	<munit:test name="api-test-suite-apix-mongodb-sapi-mainTest-api-unsupported-media-type" doc:id="f16948b6-3783-4941-be2a-893369d5acb7" description="Test">
			<munit:behavior>
				<munit-tools:mock-when doc:name="Mock when" doc:id="edda3d50-5fe0-40a9-9a6d-082e2ca4f66e" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="apixMongodbSapiConfig" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="APIKIT:UNSUPPORTED_MEDIA_TYPE" />
				</munit-tools:then-return>
				</munit-tools:mock-when>
			</munit:behavior>
			<munit:execution>
				<try doc:name="Try" doc:id="2b1c6ce8-11e0-4d70-a45c-e69a5a035acd">
					<flow-ref doc:name="apix-mongodb-sapi-main" doc:id="fbc6115c-41b0-4068-bf36-ab1fcbfb5919" name="apix-mongodb-sapi-main" />
					<error-handler>
						<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="85a3823e-57c1-4ba5-8123-0f4a4a294197">
							<logger level="INFO" doc:name="Logger" doc:id="4fba4422-4436-4754-9840-a2ce6df57e86" message='#[""]' />
						</on-error-continue>
					</error-handler>
				</try>
			</munit:execution>
			<munit:validation>
				<munit-tools:assert-equals doc:name="Assert equals" doc:id="907bbc31-0347-4590-8b2d-a860fffe6e7f" actual="#[payload.errorType.identifier]" expected="#['UNSUPPORTED_MEDIA_TYPE']" />
			</munit:validation>
		</munit:test>


</mule>
